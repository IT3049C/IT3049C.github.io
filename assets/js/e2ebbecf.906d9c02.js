"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4266],{9012:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=n(5893),s=n(1151);const r={sidebar_position:5,title:"Part 4: Capture User Input",sidebar_label:"Capture Input"},l=void 0,a={id:"wordle/capture-input",title:"Part 4: Capture User Input",description:"In this step we want to listen for user input and add it to the grid.",source:"@site/content/assignments/7.wordle/4.capture-input.md",sourceDirName:"7.wordle",slug:"/wordle/capture-input",permalink:"/assignments/wordle/capture-input",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/assignments/7.wordle/4.capture-input.md",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1708451384,formattedLastUpdatedAt:"Feb 20, 2024",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Part 4: Capture User Input",sidebar_label:"Capture Input"},sidebar:"assignments",previous:{title:"Dynamic Layout",permalink:"/assignments/wordle/dynamic-layout"},next:{title:"Game Logic and Controller",permalink:"/assignments/wordle/game-logic"}},o={},d=[{value:"Capture User Input",id:"capture-user-input",level:2},{value:"Validate the User Input",id:"validate-the-user-input",level:3},{value:"Create a function that adds a letter to a cell at a given position.",id:"create-a-function-that-adds-a-letter-to-a-cell-at-a-given-position",level:2},{value:"Capture User Input",id:"capture-user-input-1",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this step we want to listen for user input and add it to the grid."}),"\n",(0,i.jsx)(t.h2,{id:"capture-user-input",children:"Capture User Input"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Add an event listener on the document (the whole document) that listens for the ",(0,i.jsx)(t.code,{children:"keydown"})," event."]}),"\n",(0,i.jsx)(t.li,{children:"Print the user input to the console when a key is pressed."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Our game will need to capture 3 types/keys of user input:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Letters"}),"\n",(0,i.jsx)(t.li,{children:"Backspace"}),"\n",(0,i.jsx)(t.li,{children:"Enter"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"validate-the-user-input",children:"Validate the User Input"}),"\n",(0,i.jsx)(t.p,{children:"We'll need to check if the user input is a letter, backspace, or an enter key."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["to check if an input is a letter, we can use the ",(0,i.jsx)(t.code,{children:"event.key"})," property and check if it is a letter using the ",(0,i.jsx)(t.code,{children:"RegExp"})," object. You can use the following snippet:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"function isLetter(letter) {\n  return letter.length === 1 && letter.match(/[a-z]/i);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"and it can be used like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.addEventListener('keydown', (event) => {\n  if (isLetter(event.key)) {\n    console.log(`letter: ${event.key}`);\n  }\n  // ...\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"complete the snippet above to check for the backspace and enter keys."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Here's how the game should handle the different types of user input:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If the user presses a letter, add it to the grid at the right position."}),"\n",(0,i.jsx)(t.li,{children:"If the user presses the backspace key, remove the last letter from the grid."}),"\n",(0,i.jsxs)(t.li,{children:["If the user presses the enter key:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If the current position is less than the length of the word, indicate that the word is not complete."}),"\n",(0,i.jsxs)(t.li,{children:["We check if the game is over.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If the word guessed is correct, end the game."}),"\n",(0,i.jsx)(t.li,{children:"if the current attempt is more than the game allowed number of attempts, end the game."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"to be able to manage all of these, we need to capture the game state:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The word that the user is trying to guess."}),"\n",(0,i.jsx)(t.li,{children:"the current attempt (the current row)"}),"\n",(0,i.jsx)(t.li,{children:"the current position of the last letter added to the grid. (the current column)"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"We'll take care of handling the game state in the next step. For now, let's create a function to the controller that adds a letter to a cell at a given position."}),"\n",(0,i.jsx)(t.h2,{id:"create-a-function-that-adds-a-letter-to-a-cell-at-a-given-position",children:"Create a function that adds a letter to a cell at a given position."}),"\n",(0,i.jsxs)(t.p,{children:["Create a function ",(0,i.jsx)(t.code,{children:"addLetterToBox(row, col, letter)"})," that can add a letter to a cell at a given position. The function should:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Create a variable reference to the cell at the given position."}),"\n",(0,i.jsx)(t.li,{children:"Modify the cell's content to the given letter."}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Note that the row represents the attempt and the column represents the position of the letter in the word."})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"call the function, make sure it works"})}),"\n",(0,i.jsx)(t.h2,{id:"capture-user-input-1",children:"Capture User Input"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Add an event listener on the document that listens for the ",(0,i.jsx)(t.code,{children:"keydown"})," event."]}),"\n",(0,i.jsxs)(t.li,{children:["When a key is pressed, check if it is a letter.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If it is a letter, add it to the grid at the right position.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Call the function that adds a letter to a cell at a given position. (this function should also add it to the )"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["If it is a ",(0,i.jsx)(t.code,{children:"backspace"})," key, remove the last letter from the grid."]}),"\n",(0,i.jsxs)(t.li,{children:["If it is an ",(0,i.jsx)(t.code,{children:"enter"})," key:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If the current attempt is more than the game allowed number of attempts, end the game."}),"\n",(0,i.jsx)(t.li,{children:"If the current position is less than the length of the word, indicate that the word is not complete."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"If it is not a letter, ignore it."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>l});var i=n(7294);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);