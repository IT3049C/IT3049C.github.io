"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3694],{8215:function(e,t,a){var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,s=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:s},t)}},3580:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(7462),s=a(7294),l=a(2389),i=a(8427),r=a(6010),o="tabItem_LplD";function m(e){var t,a,l,m=e.lazy,u=e.block,p=e.defaultValue,c=e.values,d=e.groupId,g=e.className,h=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=c?c:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,i.lx)(k,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===p?p:null!=(t=null!=p?p:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=h[0])?void 0:l.props.value;if(null!==N&&!k.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,i.UB)(),b=v.tabGroupChoices,w=v.setTabGroupChoices,y=(0,s.useState)(N),C=y[0],M=y[1],x=[],I=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var T=b[d];null!=T&&T!==C&&k.some((function(e){return e.value===T}))&&M(T)}var E=function(e){var t=e.currentTarget,a=x.indexOf(t),n=k[a].value;n!==C&&(I(t),M(n),null!=d&&w(d,n))},j=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=x.indexOf(e.currentTarget)+1;a=x[n]||x[0];break;case"ArrowLeft":var s=x.indexOf(e.currentTarget)-1;a=x[s]||x[x.length-1]}null==(t=a)||t.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},g)},k.map((function(e){var t=e.value,a=e.label,l=e.attributes;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return x.push(e)},onKeyDown:j,onFocus:E,onClick:E},l,{className:(0,r.Z)("tabs__item",o,null==l?void 0:l.className,{"tabs__item--active":C===t})}),null!=a?a:t)}))),m?(0,s.cloneElement)(h.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function u(e){var t=(0,l.Z)();return s.createElement(m,(0,n.Z)({key:String(t)},e))}},5334:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return g}});var n=a(7462),s=a(3366),l=(a(7294),a(3905)),i=a(3580),r=a(8215),o=(a(9512),["components"]),m={sidebar_position:3,title:"Part 2: Bringing it to life",sidebar_label:"Bringing it to life"},u="Bringing it to life",p={unversionedId:"labs/we-message/javascript",id:"labs/we-message/javascript",title:"Part 2: Bringing it to life",description:"Before we start Building the application code, we need to fully imagine and visualize the process/workflow.",source:"@site/docs/labs/we-message/2.javascript.mdx",sourceDirName:"labs/we-message",slug:"/labs/we-message/javascript",permalink:"/docs/labs/we-message/javascript",editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/docs/labs/we-message/2.javascript.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Part 2: Bringing it to life",sidebar_label:"Bringing it to life"},sidebar:"labs",previous:{title:"Page Layout",permalink:"/docs/labs/we-message/layout"},next:{title:"Finalize",permalink:"/docs/labs/we-message/finalize"}},c=[{value:"Getting Messages:",id:"getting-messages",children:[],level:2},{value:"Sending Messages",id:"sending-messages",children:[],level:2}],d={toc:c};function g(e){var t=e.components,a=(0,s.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"bringing-it-to-life"},"Bringing it to life"),(0,l.kt)("p",null,"Before we start Building the application code, we need to fully imagine and visualize the process/workflow. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Getting messages:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Get/Query/Fetch all the messages from the server."),(0,l.kt)("li",{parentName:"ul"},"Parse and format the messages to present them on the screen."),(0,l.kt)("li",{parentName:"ul"},"Continuously Fetch the messages from the server to keep the messages up-to-date."))),(0,l.kt)("li",{parentName:"ul"},"Sending messages:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Get the user's name from the input field in the header."),(0,l.kt)("li",{parentName:"ul"},"Send the message in the format that the API is expecting.")))),(0,l.kt)("h2",{id:"getting-messages"},"Getting Messages:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create references to the HTML elements that we\u2019ll need.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"nameInput"),(0,l.kt)("li",{parentName:"ul"},"messageInput"),(0,l.kt)("li",{parentName:"ul"},"sendButton"),(0,l.kt)("li",{parentName:"ul"},"chatBox")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const nameInput = document.getElementById("my-name-input");\nconst myMessage = document.getElementById("my-message");\nconst sendButton = document.getElementById("send-button");\nconst chatBox = document.getElementById("chat");\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create an ",(0,l.kt)("inlineCode",{parentName:"p"},"updateMessagesInChatBox()")," function. This function will:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"fetch messages from server - ",(0,l.kt)("inlineCode",{parentName:"li"},"fetchMessages()")),(0,l.kt)("li",{parentName:"ul"},"loop over the recieved messages to convert them to ",(0,l.kt)("inlineCode",{parentName:"li"},"html")," elements - ",(0,l.kt)("inlineCode",{parentName:"li"},"formatMessages()"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the function will mark the messages as (incoming/outgoing) or (yours/anyone else's) based on the sender name in the textbox."))),(0,l.kt)("li",{parentName:"ul"},"Add the formatted messages to the chatbox. - ",(0,l.kt)("inlineCode",{parentName:"li"},"updateChatBox()"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"OR more accuretly, clear and the chatbox and insert the newly formatted messages.")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function updateMessages() {\n    // Fetch Messages\n    // Loop over the messages. Inside the loop we will\n        // get each message\n        // format it\n        // add it to the chatbox\n}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a function that uses the FetchAPI to requests messages from the server."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"URL to the Server is ",(0,l.kt)("a",{parentName:"li",href:"https://it3049c-chat-application.herokuapp.com"},"https://it3049c-chat-application.herokuapp.com")),(0,l.kt)("li",{parentName:"ul"},"URL to the link to get the messages is ",(0,l.kt)("a",{parentName:"li",href:"https://it3049c-chat-application.herokuapp.com/messages"},"https://it3049c-chat-application.herokuapp.com/messages")),(0,l.kt)("li",{parentName:"ul"},"sometime, the server might be idle and would take a few minutes to wake up again.")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const serverURL = `https://it3049c-chat-application.herokuapp.com/messages`;\n\nfunction fetchMessages() {\n    return fetch(serverURL)\n        .then( response => response.json())\n}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Call ",(0,l.kt)("inlineCode",{parentName:"p"},"fetchMessages()")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"updateMessages()")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Notice, because ",(0,l.kt)("inlineCode",{parentName:"li"},"fetchMessages()")," is an asyncronous function that returns a promise rather then the actual result, I had to make ",(0,l.kt)("inlineCode",{parentName:"li"},"updateMessages()")," an ",(0,l.kt)("inlineCode",{parentName:"li"},"async")," function as well and instruct it to await the results from ",(0,l.kt)("inlineCode",{parentName:"li"},"fetchMessages()"),".")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"async function updateMessages() {\n    // Fetch Messages\n    const messages = await fetchMessages();\n\n    // Loop over the messages. Inside the loop we will\n        // get each message\n        // format it\n        // add it to the chatbox\n}\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"try to log the ",(0,l.kt)("inlineCode",{parentName:"li"},"messages")," variable to the console to confirm the structure of each message looks like this")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "text": "This is my message",\n    "timestamp": 1537410673072\n}\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a formatter function that will take the ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," object and the username ",(0,l.kt)("inlineCode",{parentName:"p"},"my-name-input")," (from the text field) as parameters and return ",(0,l.kt)("inlineCode",{parentName:"p"},"HTML"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the function will need to parse the timestamp to a readable format.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Obviously, ",(0,l.kt)("inlineCode",{parentName:"li"},"1537410673072")," is not a readable format"))),(0,l.kt)("li",{parentName:"ul"},"compare the value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"messages.sender")," and the text input field, ",(0,l.kt)("inlineCode",{parentName:"li"},"my-name-input"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if it's the same, then use the class ",(0,l.kt)("inlineCode",{parentName:"li"},"mine")," around the message div."),(0,l.kt)("li",{parentName:"ul"},"if it's not the same, use the class ",(0,l.kt)("inlineCode",{parentName:"li"},"yours")," around the message div.")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function formatMessage(message, myNameInput) {\n    const time = new Date(message.timestamp);\n    const formattedTime = `${time.getHours()}:${time.getMinutes()}`;\n\n    if (myNameInput === message.sender) {\n        return `\n        <div class="mine messages">\n            <div class="message">\n                ${message.text}\n            </div>\n            <div class="sender-info">\n                ${formattedTime}\n            </div>\n        </div>\n        `\n    } else {\n        return `\n            <div class="yours messages">\n                <div class="message">\n                    ${message.text}\n                </div>\n                <div class="sender-info">\n                    ${message.sender} ${formattedTime}\n                </div>\n            </div>\n        `\n    }\n}\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Now we loop over the array of the messages, format them and add them to the chatbox."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'async function updateMessages() {\n    // Fetch Messages\n    const messages = await fetchMessages();\n    // Loop over the messages. Inside the loop we will:\n        // get each message\n        // format it\n        // add it to the chatbox\n    let formattedMessages = "";\n    messages.forEach(message => {\n        formattedMessages += formatMessage(message, nameInput.value);\n    });\n    chatBox.innerHTML = formattedMessages;\n}\n')),(0,l.kt)("ol",{start:8},(0,l.kt)("li",{parentName:"ol"},"We need to make sure the function is called.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"otherwise, we won't see any difference.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"updateMessages()\n")),(0,l.kt)("ol",{start:9},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"setInterval()")," to call this function once every 10 seconds to keep the new messages coming."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"setInterval(updateMessages, 10000);\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the number ",(0,l.kt)("inlineCode",{parentName:"li"},"10000")," in this scenario is what we refer to as a magic number. it's a value of some significance but someone looking at this may not easily understand what this value is",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"we like to set this value to a variable to make this a bit more readable.")))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const MILLISECONDS_IN_TEN_SECONDS = 10000;\nsetInterval(updateMessages, MILLISECONDS_IN_TEN_SECONDS);\n")))),(0,l.kt)("h2",{id:"sending-messages"},"Sending Messages"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create a send function that would:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"take the username, and message text as parameter"),(0,l.kt)("li",{parentName:"ul"},"construct a json object with the following properties ",(0,l.kt)("inlineCode",{parentName:"li"},"sender"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"text"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")),(0,l.kt)("li",{parentName:"ul"},"send messages to the server here")))),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"fetch",label:"using Fetch API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function sendMessages(username, text) {\n    const newMessage = {\n        sender: username,\n        text: text,\n        timestamp: new Date()\n    }\n\n    fetch (serverURL, {\n        method: `POST`, \n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newMessage)\n    });\n}\n"))),(0,l.kt)(r.Z,{value:"jquery",label:"Using JQuery",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function sendMessages(username, text) {\n    const newMessage = {\n        sender: username,\n        text: text,\n        timestamp: new Date()\n    }\n\n    $.post(serverURL, newMessage);\n}\n")))),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"create an Event Listener to listen to the ",(0,l.kt)("inlineCode",{parentName:"li"},"click")," event on the send button. This event handler will:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"send the message to the server and clear the text field to prepare for a new message to be sent"),(0,l.kt)("li",{parentName:"ul"},"clear the message text field")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'sendButton.addEventListener("click", function(sendButtonClickEvent) {\n    sendButtonClickEvent.preventDefault();\n    const sender = nameInput.value;\n    const message = myMessage.value;\n\n    sendMessages(sender,message);\n    myMessage.value = "";\n});\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Next: ",(0,l.kt)("a",{parentName:"strong",href:"finalize"},"Hosting and Submission"))))}g.isMDXComponent=!0}}]);