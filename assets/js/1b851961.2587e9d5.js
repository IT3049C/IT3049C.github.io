"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9941],{8967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=n(5893),s=n(1151);const o={sidebar_position:20,title:"Sidebar",sidebar_label:"\ud83d\udc81\u200d\u2642\ufe0f Sidebar"},r=void 0,a={id:"wordle/z.sidebar",title:"Sidebar",description:"What is rem in CSS?",source:"@site/content/assignments/7.wordle/z.sidebar.mdx",sourceDirName:"7.wordle",slug:"/wordle/z.sidebar",permalink:"/assignments/wordle/z.sidebar",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/assignments/7.wordle/z.sidebar.mdx",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1708451384,formattedLastUpdatedAt:"Feb 20, 2024",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Sidebar",sidebar_label:"\ud83d\udc81\u200d\u2642\ufe0f Sidebar"},sidebar:"assignments",previous:{title:"Modularization",permalink:"/assignments/wordle/module"},next:{title:"RPS in React",permalink:"/assignments/rps-in-react/"}},l={},d=[{value:"What is <code>rem</code> in CSS?",id:"what-is-rem-in-css",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h2,{id:"what-is-rem-in-css",children:["What is ",(0,i.jsx)(t.code,{children:"rem"})," in CSS?"]}),"\n",(0,i.jsxs)(t.p,{children:["In CSS , the ",(0,i.jsx)(t.code,{children:"rem"}),' unit is a relative length unit that stands for "root em." It is relative to the font-size of the root element of the document, which is typically the ',(0,i.jsx)(t.code,{children:"<html>"})," element. Unlike the ",(0,i.jsx)(t.code,{children:"em"})," unit, which is relative to the font-size of the element itself (or its parent, depending on the context), the ",(0,i.jsx)(t.code,{children:"rem"})," unit is always relative to the root element's font-size."]}),"\n",(0,i.jsxs)(t.p,{children:["When you see ",(0,i.jsx)(t.code,{children:"2.4 rem"})," in CSS, it means that the size (whether it be font-size, margin, padding, etc.) is 2.4 times the font-size of the root ",(0,i.jsx)(t.code,{children:"<html>"})," element. For example, if the font-size of the ",(0,i.jsx)(t.code,{children:"<html>"})," element is set to 16 pixels (which is a common default in browsers), then ",(0,i.jsx)(t.code,{children:"2.4 rem"})," would be equivalent to ",(0,i.jsx)(t.code,{children:"2.4 * 16 = 38.4 pixels"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["This unit is particularly useful for creating scalable and responsive designs, as it allows you to define sizes that are consistent and relative to a single base value set at the root level. Changing the font-size of the root element can then scale up or down the size of all elements defined with ",(0,i.jsx)(t.code,{children:"rem"})," units throughout the document."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(7294);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);