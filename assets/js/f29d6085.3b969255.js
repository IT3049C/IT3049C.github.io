"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3283],{8541:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var t=s(5893),a=s(1151),r=s(4866),i=s(5162);const l={sidebar_position:3,title:"Part 2: Bringing it to life",sidebar_label:"Bringing it to life"},o="Bringing it to life",c={id:"chatting-app/javascript",title:"Part 2: Bringing it to life",description:"Before we start Building the application code, we need to fully imagine and visualize the process/workflow.",source:"@site/content/assignments/3.chatting-app/2.javascript.mdx",sourceDirName:"3.chatting-app",slug:"/chatting-app/javascript",permalink:"/assignments/chatting-app/javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/assignments/3.chatting-app/2.javascript.mdx",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1704940103,formattedLastUpdatedAt:"Jan 11, 2024",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Part 2: Bringing it to life",sidebar_label:"Bringing it to life"}},d={},h=[{value:"Getting Messages:",id:"getting-messages",level:2},{value:"Sending Messages",id:"sending-messages",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"bringing-it-to-life",children:"Bringing it to life"}),"\n",(0,t.jsx)(n.p,{children:"Before we start Building the application code, we need to fully imagine and visualize the process/workflow."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Getting messages:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get/Query/Fetch all the messages from the server."}),"\n",(0,t.jsx)(n.li,{children:"Parse and format the messages to present them on the screen."}),"\n",(0,t.jsx)(n.li,{children:"Continuously Fetch the messages from the server to keep the messages up-to-date."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Sending messages:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get the user's name from the input field in the header."}),"\n",(0,t.jsx)(n.li,{children:"Send the message in the format that the API is expecting."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-messages",children:"Getting Messages:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create references to the HTML elements that we\u2019ll need.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"nameInput"}),"\n",(0,t.jsx)(n.li,{children:"messageInput"}),"\n",(0,t.jsx)(n.li,{children:"sendButton"}),"\n",(0,t.jsx)(n.li,{children:"chatBox"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const nameInput = document.getElementById("my-name-input");\nconst myMessage = document.getElementById("my-message");\nconst sendButton = document.getElementById("send-button");\nconst chatBox = document.getElementById("chat");\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create an ",(0,t.jsx)(n.code,{children:"updateMessagesInChatBox()"})," function. This function will:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["fetch messages from server - ",(0,t.jsx)(n.code,{children:"fetchMessages()"})]}),"\n",(0,t.jsxs)(n.li,{children:["loop over the recieved messages to convert them to ",(0,t.jsx)(n.code,{children:"html"})," elements - ",(0,t.jsx)(n.code,{children:"formatMessages()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the function will mark the messages as (incoming/outgoing) or (yours/anyone else's) based on the sender name in the textbox."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Add the formatted messages to the chatbox. - ",(0,t.jsx)(n.code,{children:"updateChatBox()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OR more accuretly, clear and the chatbox and insert the newly formatted messages."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function updateMessages() {\n    // Fetch Messages\n    // Loop over the messages. Inside the loop we will\n        // get each message\n        // format it\n        // add it to the chatbox\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a function that uses the FetchAPI to requests messages from the server."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["URL to the Server is ",(0,t.jsx)(n.a,{href:"https://it3049c-chat-application.herokuapp.com",children:"https://it3049c-chat-application.herokuapp.com"})]}),"\n",(0,t.jsxs)(n.li,{children:["URL to the link to get the messages is ",(0,t.jsx)(n.a,{href:"https://it3049c-chat-application.herokuapp.com/messages",children:"https://it3049c-chat-application.herokuapp.com/messages"})]}),"\n",(0,t.jsx)(n.li,{children:"sometime, the server might be idle and would take a few minutes to wake up again."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const serverURL = `https://it3049c-chat-application.herokuapp.com/messages`;\n\nfunction fetchMessages() {\n    return fetch(serverURL)\n        .then( response => response.json())\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Call ",(0,t.jsx)(n.code,{children:"fetchMessages()"})," from ",(0,t.jsx)(n.code,{children:"updateMessages()"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Notice, because ",(0,t.jsx)(n.code,{children:"fetchMessages()"})," is an asyncronous function that returns a promise rather then the actual result, I had to make ",(0,t.jsx)(n.code,{children:"updateMessages()"})," an ",(0,t.jsx)(n.code,{children:"async"})," function as well and instruct it to await the results from ",(0,t.jsx)(n.code,{children:"fetchMessages()"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"async function updateMessages() {\n    // Fetch Messages\n    const messages = await fetchMessages();\n\n    // Loop over the messages. Inside the loop we will\n        // get each message\n        // format it\n        // add it to the chatbox\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["try to log the ",(0,t.jsx)(n.code,{children:"messages"})," variable to the console to confirm the structure of each message looks like this"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "id": 1,\n    "text": "This is my message",\n    "timestamp": 1537410673072\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a formatter function that will take the ",(0,t.jsx)(n.code,{children:"message"})," object and the username ",(0,t.jsx)(n.code,{children:"my-name-input"})," (from the text field) as parameters and return ",(0,t.jsx)(n.code,{children:"HTML"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the function will need to parse the timestamp to a readable format.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Obviously, ",(0,t.jsx)(n.code,{children:"1537410673072"})," is not a readable format"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["compare the value of the ",(0,t.jsx)(n.code,{children:"messages.sender"})," and the text input field, ",(0,t.jsx)(n.code,{children:"my-name-input"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["if it's the same, then use the class ",(0,t.jsx)(n.code,{children:"mine"})," around the message div."]}),"\n",(0,t.jsxs)(n.li,{children:["if it's not the same, use the class ",(0,t.jsx)(n.code,{children:"yours"})," around the message div."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function formatMessage(message, myNameInput) {\n    const time = new Date(message.timestamp);\n    const formattedTime = `${time.getHours()}:${time.getMinutes()}`;\n\n    if (myNameInput === message.sender) {\n        return `\n        <div class="mine messages">\n            <div class="message">\n                ${message.text}\n            </div>\n            <div class="sender-info">\n                ${formattedTime}\n            </div>\n        </div>\n        `\n    } else {\n        return `\n            <div class="yours messages">\n                <div class="message">\n                    ${message.text}\n                </div>\n                <div class="sender-info">\n                    ${message.sender} ${formattedTime}\n                </div>\n            </div>\n        `\n    }\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Now we loop over the array of the messages, format them and add them to the chatbox."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'async function updateMessages() {\n    // Fetch Messages\n    const messages = await fetchMessages();\n    // Loop over the messages. Inside the loop we will:\n        // get each message\n        // format it\n        // add it to the chatbox\n    let formattedMessages = "";\n    messages.forEach(message => {\n        formattedMessages += formatMessage(message, nameInput.value);\n    });\n    chatBox.innerHTML = formattedMessages;\n}\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"8",children:["\n",(0,t.jsxs)(n.li,{children:["We need to make sure the function is called.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"otherwise, we won't see any difference."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"updateMessages()\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"9",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"setInterval()"})," to call this function once every 10 seconds to keep the new messages coming."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"setInterval(updateMessages, 10000);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the number ",(0,t.jsx)(n.code,{children:"10000"})," in this scenario is what we refer to as a magic number. it's a value of some significance but someone looking at this may not easily understand what this value is","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"we like to set this value to a variable to make this a bit more readable."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const MILLISECONDS_IN_TEN_SECONDS = 10000;\nsetInterval(updateMessages, MILLISECONDS_IN_TEN_SECONDS);\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sending-messages",children:"Sending Messages"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a send function that would:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"take the username, and message text as parameter"}),"\n",(0,t.jsxs)(n.li,{children:["construct a json object with the following properties ",(0,t.jsx)(n.code,{children:"sender"}),", ",(0,t.jsx)(n.code,{children:"text"}),", and ",(0,t.jsx)(n.code,{children:"timestamp"})]}),"\n",(0,t.jsx)(n.li,{children:"send messages to the server here"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.Z,{children:[(0,t.jsx)(i.Z,{value:"fetch",label:"using Fetch API",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function sendMessages(username, text) {\n    const newMessage = {\n        sender: username,\n        text: text,\n        timestamp: new Date()\n    }\n\n    fetch (serverURL, {\n        method: `POST`, \n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newMessage)\n    });\n}\n"})})}),(0,t.jsx)(i.Z,{value:"jquery",label:"Using JQuery",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function sendMessages(username, text) {\n    const newMessage = {\n        sender: username,\n        text: text,\n        timestamp: new Date()\n    }\n\n    $.post(serverURL, newMessage);\n}\n"})})})]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["create an Event Listener to listen to the ",(0,t.jsx)(n.code,{children:"click"})," event on the send button. This event handler will:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"send the message to the server and clear the text field to prepare for a new message to be sent"}),"\n",(0,t.jsx)(n.li,{children:"clear the message text field"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'sendButton.addEventListener("click", function(sendButtonClickEvent) {\n    sendButtonClickEvent.preventDefault();\n    const sender = nameInput.value;\n    const message = myMessage.value;\n\n    sendMessages(sender,message);\n    myMessage.value = "";\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Next: ",(0,t.jsx)(n.a,{href:"finalize",children:"Hosting and Submission"})]})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},5162:(e,n,s)=>{s.d(n,{Z:()=>i});s(7294);var t=s(6010);const a={tabItem:"tabItem_Ymn6"};var r=s(5893);function i(e){let{children:n,hidden:s,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,i),hidden:s,children:n})}},4866:(e,n,s)=>{s.d(n,{Z:()=>y});var t=s(7294),a=s(6010),r=s(2466),i=s(6550),l=s(469),o=s(1980),c=s(7392),d=s(12);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:a}}=e;return{value:n,label:s,attributes:t,default:a}}))}(s);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function m(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:s}=e;const a=(0,i.k6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,o._X)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function p(e){const{defaultValue:n,queryString:s=!1,groupId:a}=e,r=u(e),[i,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,h]=g({queryString:s,groupId:a}),[p,x]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Nk)(s);return[a,(0,t.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:a}),j=(()=>{const e=c??p;return m({value:e,tabValues:r})?e:null})();(0,l.Z)((()=>{j&&o(j)}),[j]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),x(e)}),[h,x,r]),tabValues:r}}var x=s(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(5893);function v(e){let{className:n,block:s,selectedValue:t,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const n=e.currentTarget,s=o.indexOf(n),a=l[s].value;a!==t&&(c(n),i(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{const s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":s},n),children:l.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...r,className:(0,a.Z)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function b(e){let{lazy:n,children:s,selectedValue:a}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=p(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...e,...n}),(0,f.jsx)(b,{...e,...n})]})}function y(e){const n=(0,x.Z)();return(0,f.jsx)(w,{...e,children:h(e.children)},String(n))}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>i});var t=s(7294);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);