"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8362],{3738:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(5893),a=s(1151);s(4866),s(5162);const r={sidebar_position:3,title:"Part 2: Bringing it to life",sidebar_label:"Bringing it to life"},i=void 0,l={id:"chatting-app/javascript",title:"Part 2: Bringing it to life",description:"Before we start Building the application code, we need to fully imagine and visualize the process/workflow.",source:"@site/content/assignments/6.chatting-app/2.javascript.mdx",sourceDirName:"6.chatting-app",slug:"/chatting-app/javascript",permalink:"/assignments/chatting-app/javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/assignments/6.chatting-app/2.javascript.mdx",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1706584014,formattedLastUpdatedAt:"Jan 30, 2024",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Part 2: Bringing it to life",sidebar_label:"Bringing it to life"},sidebar:"assignments",previous:{title:"Page Layout",permalink:"/assignments/chatting-app/layout"},next:{title:"Networking",permalink:"/assignments/chatting-app/network"}},o={},c=[{value:"Getting Messages:",id:"getting-messages",level:2},{value:"Sending Messages",id:"sending-messages",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Before we start Building the application code, we need to fully imagine and visualize the process/workflow."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Getting messages:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get/Query/Fetch all the messages from the server."}),"\n",(0,t.jsx)(n.li,{children:"Parse and format the messages to present them on the screen."}),"\n",(0,t.jsx)(n.li,{children:"Continuously Fetch the messages from the server to keep the messages up-to-date."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Sending messages:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get the user's name from the input field in the header."}),"\n",(0,t.jsx)(n.li,{children:"Send the message in the format that the API is expecting."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In this part, we'll mock/fake the server and the API to focus on the client-side code."}),"\n",(0,t.jsx)(n.h2,{id:"getting-messages",children:"Getting Messages:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create references to the HTML elements that we'll need."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"nameInput"}),"\n",(0,t.jsx)(n.li,{children:"messageInput"}),"\n",(0,t.jsx)(n.li,{children:"sendButton"}),"\n",(0,t.jsx)(n.li,{children:"chatBox"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{markdown:"span",children:(0,t.jsx)("strong",{children:"\ud83d\udcb0 Solution (don't open until you really have to)..."})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const nameInput = document.getElementById("my-name-input");\nconst myMessage = document.getElementById("my-message");\nconst sendButton = document.getElementById("send-button");\nconst chatBox = document.getElementById("chat");\n'})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:["Create a function that will take a message object as a function argument and ",(0,t.jsx)("u",{children:(0,t.jsx)(n.em,{children:"return"})})," ",(0,t.jsx)(n.code,{children:"HTML"})," that will be added to the chatbox."]})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The JSON structure of the message object is as follows:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "id": 1,\n    "text": "This is my message",\n    "sender": "Yahya Gilany",\n    "timestamp": 1537410673072\n}\n'})}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Review the HTML code in the previous part to see how the message should be formatted."}),"\n",(0,t.jsxs)(n.li,{children:["compare the value of the ",(0,t.jsx)(n.code,{children:"messages.sender"})," and the text input field, ",(0,t.jsx)(n.code,{children:"my-name-input"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["if it's the same, then use the class ",(0,t.jsx)(n.code,{children:"mine"})," around the message div."]}),"\n",(0,t.jsxs)(n.li,{children:["if it's not the same, use the class ",(0,t.jsx)(n.code,{children:"yours"})," around the message div."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["the function will need to parse the timestamp to a readable format.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Obviously, ",(0,t.jsx)(n.code,{children:"1537410673072"})," is not a readable format"]}),"\n",(0,t.jsxs)(n.li,{children:["You may need to review the ",(0,t.jsx)(n.code,{children:"Date"})," object in JavaScript to see how to parse the timestamp. You can find that on MDN at ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",children:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{markdown:"span",children:(0,t.jsx)("strong",{children:"\ud83d\udcb0 Solution (don't open until you really have to)..."})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function formatMessage(message, myNameInput) {\n  const time = new Date(message.timestamp);\n  const formattedTime = `${time.getHours()}:${time.getMinutes()}`;\n\n  if (myNameInput === message.sender) {\n    return `\n      <div class="mine messages">\n        <div class="message">\n          ${message.text}\n        </div>\n        <div class="sender-info">\n          ${formattedTime}\n        </div>\n      </div>\n    `\n  } else {\n    return `\n      <div class="yours messages">\n        <div class="message">\n          ${message.text}\n        </div>\n        <div class="sender-info">\n          ${message.sender} ${formattedTime}\n        </div>\n      </div>\n    `\n  }\n}\n'})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:["Because we'll be mocking some of the server and API calls, create a function named ",(0,t.jsx)(n.code,{children:"fetchMessages()"})," that will return an array of messages."]})}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{markdown:"span",children:(0,t.jsx)("strong",{children:"\ud83d\udcb0 Solution (don't open until you really have to)..."})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function fetchMessages() {\n  return [\n    {\n      id: 1,\n      text: "This is my message",\n      sender: "Yahya Gilany",\n      timestamp: 1537410673072\n    },\n    {\n      id: 2,\n      text: "This is another message",\n      sender: "Yahya Gilany",\n      timestamp: 1537410673072\n    },\n    {\n      id: 3,\n      text: "This is a message from someone else",\n      sender: "Someone Else",\n      timestamp: 1537410673072\n    }\n  ];\n}\n'})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Create a function ",(0,t.jsx)(n.code,{children:"updateMessagesInChatBox()"})," that would use the array returned from ",(0,t.jsx)(n.code,{children:"fetchMessages()"})," and formats them using the ",(0,t.jsx)(n.code,{children:"formatMessage()"})," and injects the resulting response into the UI."]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["create an array of chat messages objects. and wrap it in a function named  fetch messages from server - ",(0,t.jsx)(n.code,{children:"fetchMessages()"})]}),"\n",(0,t.jsxs)(n.li,{children:["loop over the recieved messages to convert them to ",(0,t.jsx)(n.code,{children:"html"})," elements - ",(0,t.jsx)(n.code,{children:"formatMessages()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the function will mark the messages as (incoming/outgoing) or (yours/anyone else's) based on the sender name in the textbox."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Add the formatted messages to the chatbox. - ",(0,t.jsx)(n.code,{children:"updateChatBox()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OR more accuretly, clear and the chatbox and insert the newly formatted messages."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function updateMessages() {\n  // Fetch Messages\n  // Loop over the messages. Inside the loop we will\n    // get each message\n    // format it\n    // add it to the chatbox using DOM manipulation\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["You may combine the formatted messages as a single HTML string and inject it, using ",(0,t.jsx)(n.code,{children:"innerHTML"})," into the chatbox.\n",(0,t.jsx)(n.strong,{children:"OR"}),"\nYou may create a multiple fragments and append them into the chatbox"]})}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{markdown:"span",children:(0,t.jsx)("strong",{children:"\ud83d\udcb0 Solution (don't open until you really have to)..."})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function updateMessages() {\n  const messages = fetchMessages();\n  let formattedMessages = "";\n  messages.forEach(message => {\n      formattedMessages += formatMessage(message, nameInput.value);\n  });\n  chatBox.innerHTML = formattedMessages;\n}\n'})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"We need to make sure the function is called."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"otherwise, we won't see any difference. :)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"updateMessages()\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sending-messages",children:"Sending Messages"}),"\n",(0,t.jsx)(n.p,{children:"Again we're continuing to mock the server and API calls and we're just focusing on the client-side code of manipulating the DOM."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Create a send function."})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"take the username, and message text as function arguments"}),"\n",(0,t.jsxs)(n.li,{children:["construct a json object with the following properties ",(0,t.jsx)(n.code,{children:"sender"}),", ",(0,t.jsx)(n.code,{children:"text"}),", and ",(0,t.jsx)(n.code,{children:"timestamp"})]}),"\n",(0,t.jsx)(n.li,{children:"add the message to the chatbox"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:["create an Event Listener to listen to the ",(0,t.jsx)(n.code,{children:"click"})," event on the send button."]})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Call the ",(0,t.jsx)(n.code,{children:"sendMessages()"})," function, passing the values of the appropriate fields."]}),"\n",(0,t.jsx)(n.li,{children:"clear the message text field"}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{markdown:"span",children:(0,t.jsx)("strong",{children:"\ud83d\udcb0 Solution (don't open until you really have to)..."})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'sendButton.addEventListener("click", function(sendButtonClickEvent) {\n  sendButtonClickEvent.preventDefault();\n  const sender = nameInput.value;\n  const message = myMessage.value;\n\n  sendMessages(sender,message);\n  myMessage.value = "";\n});\n'})})]})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5162:(e,n,s)=>{s.d(n,{Z:()=>i});s(7294);var t=s(512);const a={tabItem:"tabItem_Ymn6"};var r=s(5893);function i(e){let{children:n,hidden:s,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,i),hidden:s,children:n})}},4866:(e,n,s)=>{s.d(n,{Z:()=>w});var t=s(7294),a=s(512),r=s(2466),i=s(6550),l=s(469),o=s(1980),c=s(7392),d=s(12);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:a}}=e;return{value:n,label:s,attributes:t,default:a}}))}(s);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function m(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:s}=e;const a=(0,i.k6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,o._X)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function p(e){const{defaultValue:n,queryString:s=!1,groupId:a}=e,r=h(e),[i,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,u]=g({queryString:s,groupId:a}),[p,x]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Nk)(s);return[a,(0,t.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:a}),j=(()=>{const e=c??p;return m({value:e,tabValues:r})?e:null})();(0,l.Z)((()=>{j&&o(j)}),[j]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)}),[u,x,r]),tabValues:r}}var x=s(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(5893);function v(e){let{className:n,block:s,selectedValue:t,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const n=e.currentTarget,s=o.indexOf(n),a=l[s].value;a!==t&&(c(n),i(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{const s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":s},n),children:l.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:u,onClick:d,...r,className:(0,a.Z)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function b(e){let{lazy:n,children:s,selectedValue:a}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=p(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...e,...n}),(0,f.jsx)(b,{...e,...n})]})}function w(e){const n=(0,x.Z)();return(0,f.jsx)(y,{...e,children:u(e.children)},String(n))}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>i});var t=s(7294);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);