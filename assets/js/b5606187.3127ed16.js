"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2831],{1801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=t(5893),c=t(1151);const o={sidebar_position:4,title:"React"},r=void 0,l={id:"react",title:"React",description:"- Let's create a basic Hello World app using HTML.",source:"@site/content/course-notes/react.mdx",sourceDirName:".",slug:"/react",permalink:"/course-notes/react",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/course-notes/react.mdx",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1708628011,formattedLastUpdatedAt:"Feb 22, 2024",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"React"},sidebar:"courseNotes",previous:{title:"Miscellaneous",permalink:"/course-notes/misc"}},a={},d=[];function i(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Let's create a basic Hello World app using HTML."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root">\n    <div class="container">\n      Hello World\n    </div>\n  </div>\n</body>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's recreate that using JS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<body>\n  <div id=\"root\"></div>\n  <script type=\"module\">\n    const rootElement = document.getElementById('root')\n    const element = document.createElement('div')\n    element.textContent = 'Hello World'\n    element.className = 'container'\n    rootElement.append(element)\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's recreate that using JS and a function"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<body>\n  <div id=\"root\"></div>\n  <script type=\"module\">\n    const rootElement = document.getElementById('root')\n\n    function HelloWorld() {\n      const element = document.createElement('div')\n      element.textContent = 'Hello World'\n      element.className = 'container'\n      return element\n    }\n\n    rootElement.append(HelloWorld())\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsx)(n.p,{children:"We can append it multiple times and it will work"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Let's make this a bit more generic, we can call it a Text component.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"provide the text as a parameter"}),"\n",(0,s.jsx)(n.li,{children:"provide the class as a parameter"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<body>\n  <div id=\"root\"></div>\n  <script type=\"module\">\n    const rootElement = document.getElementById('root')\n\n    function Text(text, className) {\n      const element = document.createElement('div')\n      element.textContent = text\n      element.className = className\n      return element\n    }\n\n    rootElement.append(Text('Hello World', 'container'))\n    rootElement.append(Text('Goodbye World','container'))\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's use object destructuring to make it a bit more readable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<body>\n  <div id=\"root\"></div>\n  <script type=\"module\">\n    const rootElement = document.getElementById('root')\n\n    function Text({text, className}) {\n      const element = document.createElement('div')\n      element.textContent = text\n      element.className = className\n      return element\n    }\n\n    rootElement.append(Text({text: 'Hello World', className: 'container'}))\n    rootElement.append(Text({text: 'Goodbye World', className: 'container'}))\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is all great but, this is not the original intent of JS and it's a bit taxing on the browser to do this. This is where React comes in."}),"\n",(0,s.jsx)(n.p,{children:"Now what if I want to add children elements to those Text components?"}),"\n",(0,s.jsx)(n.p,{children:"React introduces a new way to create components and manage the DOM."}),"\n",(0,s.jsx)(n.p,{children:"Let's do the same things with React."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"I'm not setting the app up with a bundler, so I'm going to use the UMD build of React and ReactDOM. (just for demo purposes, you should use a bundler in a real app.)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I'm using unpkg to get the UMD builds of React and ReactDOM."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script type="module">\n    const rootElement = document.getElementById(\'root\')\n\n    const element = React.createElement(\'div\', {\n      children: `Hello World`,\n      className: `container`,\n    })\n\n    ReactDOM.createRoot(rootElement).render(element)\n  <\/script>\n</body>\n'})}),"\n",(0,s.jsx)(n.p,{children:"We can nest components in React"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<body>\n  <div id=\"root\"></div>\n  <script src=\"https://unpkg.com/react@18.1.0/umd/react.development.js\"><\/script>\n  <script src=\"https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js\"><\/script>\n  <script type=\"module\">\n    const rootElement = document.getElementById('root')\n    const element = React.createElement('div', {\n      className: 'container',\n      children: [\n        React.createElement('span', null, 'Hello'),\n        ' ',\n        React.createElement('span', null, 'World'),\n      ],\n    })\n    ReactDOM.createRoot(rootElement).render(element)\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsx)(n.p,{children:"let's just get rid of the rootElement variable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<body>\n  <div id=\"root\"></div>\n  <script src=\"https://unpkg.com/react@18.1.0/umd/react.development.js\"><\/script>\n  <script src=\"https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js\"><\/script>\n  <script type=\"module\">\n    const element = React.createElement('div', {\n      className: 'container',\n      children: [\n        React.createElement('span', null, 'Hello'),\n        ' ',\n        React.createElement('span', null, 'World'),\n      ],\n    })\n    ReactDOM.createRoot(document.getElementById('root')).render(element)\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsx)(n.p,{children:"so this is a nice thing that we couldn't easily do with vanilla JS, but honestly it looks tedious and not very readable.\nReact introduces JSX, which is a syntax extension for JavaScript. It looks like HTML, but it's actually JavaScript."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    const element = <div className="container">Hello World</div>\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now because this is JS, we can use variables and expressions in our JSX."}),"\n",(0,s.jsx)(n.p,{children:"Interpolation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    const children = \'Hello World\'\n    const className = \'container\'\n    const element = <div className={className}>{children}</div>\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Props"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"passing props to a component"}),"\n",(0,s.jsx)(n.li,{children:"using props in a component"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    const children = \'Hello World\'\n    const className = \'container\'\n    const props = {children, className}\n    const element = <div {...props} />\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Similar to the Text component we created earlier, we can create a component in React."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    // NOTE: this is NOT being used as a component. We\'re not quite there yet.\n    function message({children}) {\n      return <div className="message">{children}</div>\n    }\n\n    const element = (\n      <div className="container">\n        {message({children: \'Hello World\'})}\n        {message({children: \'Goodbye World\'})}\n      </div>\n    )\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Using createComponent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    // This is being used as a component. But it\'s still not quite awesome yet.\n    function message({children}) {\n      return <div className="message">{children}</div>\n    }\n\n    const element = (\n      <div className="container">\n        {React.createElement(message, {children: \'Hello World\'})}\n        {React.createElement(message, {children: \'Goodbye World\'})}\n      </div>\n    )\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Using JSX"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    // This is being used as a component \ud83c\udf89\n    function Message({children}) {\n      return <div className="message">{children}</div>\n    }\n\n    const element = (\n      <div className="container">\n        <Message>Hello World</Message>\n        <Message>Goodbye World</Message>\n      </div>\n    )\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at how we can style our components."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  <script type="text/babel">\n    function Message({children}) {\n      const style = {\n        color: \'red\',\n      }\n      return <div style={style}>{children}</div>\n    }\n\n    const element = (\n      <div>\n        <Message>Hello World</Message>\n        <Message>Goodbye World</Message>\n      </div>\n    )\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var s=t(7294);const c={},o=s.createContext(c);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);