"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2435],{6866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(5893),i=t(1151);const o={sidebar_position:4,title:"Part 3: Unit Testing your code using Jest",sidebar_label:"Unit Testing (Jest)"},r=void 0,a={id:"tooling/unit-testing",title:"Part 3: Unit Testing your code using Jest",description:"Installing Jest",source:"@site/content/assignments/10.tooling/3.unit-testing.mdx",sourceDirName:"10.tooling",slug:"/tooling/unit-testing",permalink:"/assignments/tooling/unit-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/assignments/10.tooling/3.unit-testing.mdx",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1706480007,formattedLastUpdatedAt:"Jan 28, 2024",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Part 3: Unit Testing your code using Jest",sidebar_label:"Unit Testing (Jest)"}},c={},l=[{value:"Installing Jest",id:"installing-jest",level:2},{value:"Configuring",id:"configuring",level:2},{value:"About those Configurations",id:"about-those-configurations",level:4},{value:"Some More Project Configurations",id:"some-more-project-configurations",level:3},{value:"Write New Tests",id:"write-new-tests",level:3},{value:"Improving the Developer Experience with VSCode Extensions",id:"improving-the-developer-experience-with-vscode-extensions",level:2},{value:"Write more tests with Mocks",id:"write-more-tests-with-mocks",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"installing-jest",children:"Installing Jest"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Install Jest from npm ",(0,s.jsx)(n.code,{children:"npm install --save-dev jest"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This step is already done for you as you install dependencies defined in ",(0,s.jsx)(n.code,{children:"package.json"})," by running ",(0,s.jsx)(n.code,{children:"npm install "})," in the beginning of the lab."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuring",children:"Configuring"}),"\n",(0,s.jsx)(n.p,{children:"Generally, you wouldn't need a lot of configurations to get started with Jest. But because there are already some unit tests that are already included, and those tests require a bit of configuration, we'll go over some of the configurations that you might need to do."}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Creat the following configurations"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="jest.config.js"',children:"module.exports = {\n  setupFilesAfterEnv: [\n    `regenerator-runtime/runtime`,\n    `@testing-library/jest-dom/extend-expect`,\n  ],\n  clearMocks: true,\n  testEnvironment: `node`,\n  watchPathIgnorePatterns: [`node_modules`],\n  testPathIgnorePatterns: [`node_modules`],\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"about-those-configurations",children:"About those Configurations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["becuase of how I'm testing the DOM and how I'm using the ",(0,s.jsx)(n.code,{children:"@testing-library/dom"})," and ",(0,s.jsx)(n.code,{children:"@testing-library/jest-dom"})," libraries, I need to add ",(0,s.jsx)(n.code,{children:"regenerator-runtime/runtime"})," and ",(0,s.jsx)(n.code,{children:"@testing-library/jest-dom/extend-expect"})," to the ",(0,s.jsx)(n.code,{children:"setupFilesAfterEnv"})," array. This extends the ",(0,s.jsx)(n.code,{children:"expect"})," function to include some useful assertions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clearMocks"})," is a boolean that tells Jest to clear the mocks after each test. This is useful if you have a lot of mocks and you want to make sure that you don't have any state that's left over from the previous test.","\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["In this lab, I will show you how you can use Mock to mock out the ",(0,s.jsx)(n.code,{children:"Math.random()"})," function."]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testEnvironment"})," is a string that tells Jest what environment to run the tests in. In this case, we're using ",(0,s.jsx)(n.code,{children:"node"})," because we're using Jest in a Node environment."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"watchPathIgnorePatterns"})," is an array of strings that tells Jest to ignore any files that match those patterns. This is useful if you have a lot of files and you don't want to run tests on them."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testPathIgnorePatterns"})," is an array of strings that tells Jest to ignore any files that match those patterns. This is useful if you have a lot of files and you don't want to run tests on them."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"some-more-project-configurations",children:"Some More Project Configurations"}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Navigate to ",(0,s.jsx)(n.code,{children:"tests/0.folderStructure.test.js"})," file for example. If you had already installed the VSCode ESLint, you'll see that it's flagging some of the built-in jest functions."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"to fix that, we need to add the Jest env. to the eslint config."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title=".eslintrc.json"',children:'{\n  "extends": "eslint:recommended",\n  "parserOptions": {\n    "ecmaVersion": "latest",\n    "sourceType": "module"\n  },\n  "env": {\n    "browser": true,\n    "node": true,\n    "es2021": true,\n    // highlight-start\n    "jest": true\n    // highlight-end\n  },\n  "rules": {\n    "array-bracket-spacing": [2, "always"],\n    "no-const-assign": 2,\n    "no-var": "error",\n    "indent": [2, 2],\n    "quotes": [2, "backtick"],\n    "eqeqeq": "error"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"write-new-tests",children:"Write New Tests"}),"\n",(0,s.jsxs)(n.p,{children:["We will be testing the Logic of the Rock-Paper-Scissors game, or ",(0,s.jsx)(n.code,{children:"RockPaperScissors"})," class."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We will be testing the ",(0,s.jsx)(n.code,{children:"determinesWinner"})," and ",(0,s.jsx)(n.code,{children:"generateCPUResponse"})," functions."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["Create a new file: ",(0,s.jsx)(n.code,{children:"tests/3.rock_paper_scissors-logic.test.js"})," file."]}),"\n",(0,s.jsx)(n.li,{children:"on the top, import the Rock Paper Scissors class (now that it's modularized)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="3.rock_paper_scissors-logic.test.js"',children:"const { RockPaperScissors } = require(`../resources/scripts/rock_paper_scissors.js`);\n\ndescribe(`RockPaperScissors class`, function () {\n  describe(`determineWinner()`, function () {\n    test(`win cases`, function () {\n      const game = new RockPaperScissors();\n      expect(game.determineWinner(`rock`, `scissors`)).toBe(`win`);\n      // Complete the test\n    });\n\n    test(`tie cases`, function () {\n      // Write your test here\n    });\n\n    test(`lost cases`, function () {\n      // Write your test here\n    });\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsxs)(n.li,{children:["Try running the tests using ",(0,s.jsx)(n.code,{children:"npm test"})," and make sure your new tests are passing."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"improving-the-developer-experience-with-vscode-extensions",children:"Improving the Developer Experience with VSCode Extensions"}),"\n",(0,s.jsxs)(n.p,{children:["Before we create more tests, let's try to streamline the process of writing and running tests.\n7. Install the ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest",children:"VScode Jest Extension"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This will always run the tests in watch mode and show the result of the test in the side bar as well as next to each test."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"write-more-tests-with-mocks",children:"Write more tests with Mocks"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Math.random()"})," function is a random number generator. It's a function that returns a number between 0 and 1. and the result of it is .. Well, Random!"]}),"\n",(0,s.jsxs)(n.p,{children:["It's difficuly to test the ",(0,s.jsx)(n.code,{children:"generateCPUResponse"})," function because it uses the ",(0,s.jsx)(n.code,{children:"Math.random"}),", leading to a different response every time. (it's not exactly a pure function)."]}),"\n",(0,s.jsxs)(n.p,{children:["What we'll try to do here, is to hijack the ",(0,s.jsx)(n.code,{children:"Math.random()"})," function and mock it to return a specific value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="3.rock_paper_scissors-logic.test.js"',children:"const { RockPaperScissors } = require(`../resources/scripts/rock_paper_scissors.js`);\n// highlight-next-line\nconst mathRandomSpy = jest.spyOn(Math, `random`);\n\n\ndescribe(`RockPaperScissors class`, function () {\n  describe(`determineWinner()`, function () {\n    test(`win cases`, function () {\n      const game = new RockPaperScissors();\n      expect(game.determineWinner(`rock`, `scissors`)).toBe(`win`);\n      // Complete the test\n    });\n\n    test(`tie cases`, function () {\n      // Write your test here\n    });\n\n    test(`lost cases`, function () {\n      // Write your test here\n    });\n  });\n\n  // highlight-start\n  describe(`generateCPUResponse()`, function () {\n    it(`Math.Random = 0.1 -> Rock`, function() {\n      mathRandomSpy.mockImplementation(() => 0.1);\n      const game = new RockPaperScissors();\n      expect(game.generateCPUResponse()).toBe(`rock`);\n    });\n\n    it(`Math.Random = 0.5 -> Paper`, function() {\n      // Write your test here\n    });\n\n    it(`Math.Random = 0.9 -> Paper`, function() {\n      // Write your test here\n    });\n\n  });\n// highlight-end\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(7294);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);