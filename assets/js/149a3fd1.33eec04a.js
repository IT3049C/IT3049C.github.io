"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[834],{1971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(5893),s=n(1151);const o={sidebar_position:4,title:"Part 3: About States",sidebar_label:"States"},r=void 0,i={id:"rps-in-react/states",title:"Part 3: About States",description:"For React to capture changes and interactions in the application, it uses a concept called state. A state is a JavaScript object that stores a component's dynamic data and determines the component's behavior. When the state of a component changes, the component re-renders.",source:"@site/content/assignments/8.rps-in-react/3.states.md",sourceDirName:"8.rps-in-react",slug:"/rps-in-react/states",permalink:"/assignments/rps-in-react/states",draft:!1,unlisted:!1,editUrl:"https://github.com/IT3049C/IT3049C.github.io/tree/main/content/assignments/8.rps-in-react/3.states.md",tags:[],version:"current",lastUpdatedBy:"Yahya Gilany",lastUpdatedAt:1709518744,formattedLastUpdatedAt:"Mar 4, 2024",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Part 3: About States",sidebar_label:"States"},sidebar:"assignments",previous:{title:"Page Layout",permalink:"/assignments/rps-in-react/layout"},next:{title:"Lifting the State up",permalink:"/assignments/rps-in-react/lift-state-up"}},c={},d=[];function l(e){const t={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["For React to capture changes and interactions in the application, it uses a concept called ",(0,a.jsx)(t.code,{children:"state"}),". A state is a JavaScript object that stores a component's dynamic data and determines the component's behavior. When the state of a component changes, the component re-renders."]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["In the ",(0,a.jsx)(t.code,{children:"WelcomeView.jsx"})," file, we need to add a state to store the user's name. We can do this by using the ",(0,a.jsx)(t.code,{children:"useState"})," hook provided by React. The ",(0,a.jsx)(t.code,{children:"useState"})," hook returns a stateful value and a function to update it. The initial value of the state is passed as an argument to the ",(0,a.jsx)(t.code,{children:"useState"})," hook."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:'title="src/components/WelcomeView.jsx"',children:'import { useState } from "react";\n\nconst WelcomeView = () => {\n  const [userName, setUserName] = useState("");\n\n  return (\n    <div id="welcome-screen">\n      <form id="name-form">\n        <div className="form-group">\n          <label htmlFor="username">Type your name: </label>\n          <input\n            value={userName}\n            onChange={(e) => {setUserName(e.target.value)}}\n            className="form-control"\n            type="text"\n            id="username"\n            name="username"\n            required placeholder="Enter Name Here..." minLength="2"\n            maxLength="15" />\n        </div>\n        <button class="btn btn-primary" id="start-game-button" type="button">\n          Start Game!\n        </button>\n      </form>\n    </div>\n  );\n};\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>r});var a=n(7294);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);